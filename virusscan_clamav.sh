#!/bin/bash
VERSION="2017-05-10 11:30"
THIS_FILE="virusscan_clamav.sh"
#
## Brief Description
##
## This script will do a scan for viruses in a specified directory
## using Clam Antivirus which is an open source antivirus engine
## for detecting malicious viruses, trojans, malware, etc.
##
## By The ClamAV Team: http://www.clamav.net/about.html#credits
##
##
## Code Change History
##
## 2017-05-10 *Main Program added option to update virus definitons
##             via freshclam.
##            *Main Program added detection of valid arguments. 
##            *f_arguments added to detect valid arguments "--version",
##             "--about", and "--history".
##            *f_help_message_txt added to allow the argument "--help"
##             to invoke a help message.
##            *f_script_path added.
##
## 2017-02-09 *f_show_only_infected_txt, f_show_all_txt improved readabilty of 
##             display of command and options.
##
## 2017-02-08 *Main Program checked if $FILE_VIEWER application is
##             installed by using "test" instead of "eval" command.
##
## 2017-01-25 *Improved messages added start/end times.
##
## 2017-01-23 *Rewrote script added option to show all/only infected
##             files.
## 2016-09-06 *Added list of infected files and errors at end of
##             $LOG_FILE.
#
#
# +----------------------------------------+
# |     Function f_help_message_txt        |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: None.
# Outputs: None.
#
f_help_message_txt () {
      echo -n $(tput setaf 1)
      echo -n $(tput bold)
      echo "Usage: sudo bash viruscan_clamav.sh [DIRECTORY TO BE SCANNED]"
      echo "       bash viruscan_clamav.sh --help     # Displays this help message."
      echo "       bash viruscan_clamav.sh --version  # Displays script version."
      echo "       bash viruscan_clamav.sh --about    # Displays script version."
      echo "       bash viruscan_clamav.sh --history  # Displays script code history."
      echo
      echo "Scan for viruses within the specified directory."
      echo
}  # End of function f_help_message_txt.
#
# +----------------------------------------+
# |         Function f_arguments           |
# +----------------------------------------+
#
#  Inputs: $1=Argument
#             [SCAN_DIR]
#             [--help]
#             [--about]
#             [--version]
#             [--history]
#    Uses: None.
# Outputs: ERROR.
#
f_arguments () {
      # If there is more than one argument, display help USAGE message, because only one argument is allowed.
      if [ $# -ge 2 ] ; then
         f_help_message
         exit 0  # This cleanly closes the process generated by #!bin/bash. 
                 # Otherwise every time this script is run, another instance of
                 # process /bin/bash is created using up resources.
      fi
      #
      case $1 in
           --help | "--?" | "-?" | "?")
           # If the one argument is "--help" display help USAGE message.
           f_help_message_txt
           exit 0  # This cleanly closes the process generated by #!bin/bash. 
                   # Otherwise every time this script is run, another instance of
                   # process /bin/bash is created using up resources.
           ;;
           --ver | --vers | --version | --about)
           f_about_txt
           exit 0  # This cleanly closes the process generated by #!bin/bash. 
                   # Otherwise every time this script is run, another instance of
                   # process /bin/bash is created using up resources.
           ;;
           --hist | --history)
           f_code_history_txt
           exit 0  # This cleanly closes the process generated by #!bin/bash. 
                   # Otherwise every time this script is run, another instance of
                   # process /bin/bash is created using up resources.
           ;;
           -*)
           # If the one argument is "--help" display help USAGE message.
           f_help_message_txt
           exit 0  # This cleanly closes the process generated by #!bin/bash. 
                   # Otherwise every time this script is run, another instance of
                   # process /bin/bash is created using up resources.
           ;;
      esac
}  # End of function f_arguments.
#
# +------------------------------------+
# |        Function f_about_txt        |
# +------------------------------------+
#
#  Inputs: THIS_FILE, VERSION.
#    Uses: None.
# Outputs: None.
#
f_about_txt () {
      #clear # Blank the screen.
      echo "Script $THIS_FILE."
      echo "Version: $VERSION"
      echo
}  # End of f_about_txt.
#
# +----------------------------------------+
# |       Function f_code_history_txt      |
# +----------------------------------------+
#
#  Inputs: THIS_DIR, THIS_FILE.
#    Uses: None.
# Outputs: None.
#
f_code_history_txt () {
      clear # Blank the screen.
      # Display Code History (all lines beginning with "##" but do not print "##").
      # sed substitutes null for "##" at the beginning of each line
      # so it is not printed.
      # less -P customizes prompt for
      # %f <FILENAME> page <num> of <pages> (Spacebar, PgUp/PgDn . . .)
      sed -n 's/^##//'p $THIS_DIR/$THIS_FILE | less -P '(Spacebar, PgUp/PgDn, Up/Dn arrows, press q to quit)'
}  # End of function f_code_history_txt.
#
# +----------------------------------------+
# |         Function f_script_path         |
# +----------------------------------------+
#
#  Inputs: $BASH_SOURCE (System variable).
#    Uses: None.
# Outputs: SCRIPT_PATH.
#
f_script_path () {
      # BASH_SOURCE[0] gives the filename of the script.
      # dirname "{$BASH_SOURCE[0]}" gives the directory of the script
      # Execute commands: cd <script directory> and then pwd
      # to get the directory of the script.
      # NOTE: This code does not work with symlinks in directory path.
      #
      # !!!Non-BASH environments will give error message about line below!!!
      SCRIPT_PATH=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
      # echo $SCRIPT_PATH  #Diagnostic test line.
}  # End of function f_script_path.
#
# +----------------------------------------+
# | Function f_update_virus_definitions_txt|
# +----------------------------------------+
#
#  Inputs: None.
#          None.
#    Uses: X.
# Outputs: None.
#
f_update_virus_definitions_txt () {
clamscan --version  # Display on-screen the version of clamav.
echo
echo "Before scanning for viruses, do you want to update the virus definitions?"
echo -n "(Y/n/quit): " ; read X
case $X in
     [Nn] | [Nn][Oo])
     ;;
     [Qq] | [Qq][Uu] | [Qq][Uu][Ii] | [Qq][Uu][Ii][Tt]) f_abort_txt
     ;;
     *) echo ; echo
        sudo freshclam
        ERROR=$?
        if [ $ERROR -ne 0 ] ; then
           echo -n $(tput setaf 1)
           echo -n $(tput bold)
           echo "Error: Failed to update virus definitions."
           f_abort_txt
        fi
     ;;
esac
unset X
}  # End of function f_update_virus_definitions_txt
#
# +----------------------------------------+
# |  Function f_show_only_infected_txt_txt |
# +----------------------------------------+
#
#  Inputs: $1=clamscan OPTIONS string.
#          $2=Directory to be scanned.
#    Uses: START_TIME, OPTIONS.
# Outputs: None.
#
f_show_only_infected_txt () {
       START_TIME=$(date)
       # Substitute <space> for "_" in string $1.
       OPTIONS=$(echo $1 | tr '_' ' ')
       #
       echo "Command: sudo clamscan $OPTIONS --log=$LOG_FILE $2"
       echo
       echo "              OPTIONS: -r Recursive to sub-directories."
       echo "                       -v Verbose reporting."
       echo "                       -i Only print infected files." 
       echo
       echo -n "Does the command look OK? (Ctrl-C to abort)" ; read X  # Diagnostic line.
       echo
       echo "The screen may look like nothing is happening but please be patient."
       echo "The scan may take a long time."
       echo "Please wait..."
       echo
       sudo clamscan $OPTIONS --log="$LOG_FILE" $2
       echo >>$LOG_FILE
       echo >>$LOG_FILE
       echo "------------------------------------------------------------------------------" >>$LOG_FILE
       echo "Scan directory: $2" >>$LOG_FILE
       echo "Started on: $START_TIME" >>$LOG_FILE
       echo -n "  Ended on: " >>$LOG_FILE ; date>>$LOG_FILE
       echo >>$LOG_FILE
       echo
       echo "See log file for more details at $LOG_FILE"
       unset START_TIME OPTIONS
}  # End of function f_show_only_infected_txt
#
# +----------------------------------------+
# |      Function f_show_all_txt_txt       |
# +----------------------------------------+
#
#  Inputs: $1=clamscan OPTIONS string.
#          $2=Directory to be scanned.
#    Uses: START_TIME, OPTIONS.
# Outputs: None.
#
f_show_all_txt_txt () {
       START_TIME=$(date)
       # Substitute <space> for "_" in string $1.
       OPTIONS=$(echo $1 | tr '_' ' ')
       #
       echo "Command: sudo clamscan $OPTIONS --log=$LOG_FILE $2"
       echo
       echo "              OPTIONS: -r Recursive to sub-directories."
       echo "                       -v Verbose reporting."
       echo "                       -i Only print infected files." 
       echo
       echo -n "Does the command look OK? (Ctrl-C to abort) " ; read X  # Diagnostic line.
       echo
       echo "The screen may look like nothing is happening but please be patient."
       echo "The scan may take a long time."
       echo "Please wait..."
       echo
       sudo clamscan $OPTIONS --log="$LOG_FILE" $2
       echo >>$LOG_FILE
       echo >>$LOG_FILE
       echo "------------------------------------------------------------------------------" >>$LOG_FILE
       echo "Scan directory: $2" >>$LOG_FILE
       echo "Started on: $START_TIME" >>$LOG_FILE
       echo -n "  Ended on: " >>$LOG_FILE ; date>>$LOG_FILE
       echo >>$LOG_FILE
       echo "List of infected files below:" >>$LOG_FILE
       grep FOUND $LOG_FILE >$LOG_FILE_TMP
       cat $LOG_FILE_TMP >>$LOG_FILE
       echo "<<End of list of infected files>>" >>$LOG_FILE
       echo >>$LOG_FILE
       echo >>$LOG_FILE
       echo "------------------------------------------------------------------------------" >>$LOG_FILE
       echo "List of errors below:" >>$LOG_FILE
       grep ERROR $LOG_FILE >$LOG_FILE_TMP
       cat $LOG_FILE_TMP >>$LOG_FILE
       echo >>$LOG_FILE
       echo "<<End of list of errors>>" >>$LOG_FILE
       echo
       echo "See log file for more details at $LOG_FILE"
       unset START_TIME OPTIONS
}  # End of function f_show_all_txt
#
# +----------------------------------------+
# |          Function f_abort_txt          |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: None.
# Outputs: None.
#
f_abort_txt() {
      echo $(tput setaf 1) # Set font to color red.
      echo >&2 "***************"
      echo >&2 "*** ABORTED ***"
      echo >&2 "***************"
      echo
      echo "An error occurred. Exiting..." >&2
      exit 1
      echo -n $(tput sgr0) # Set font to normal color.
} # End of function f_abort_txt.
#
# +----------------------------------------+
# |           Start of Main Program        |
# +----------------------------------------+
#
echo
echo "Clam anti-virus scanning script: virusscan_clamav.sh $VERSION"
echo
#
# Set SCRIPT_PATH to directory path of script.
f_script_path
THIS_DIR=$SCRIPT_PATH
#
# Check for any arguments in the bash virusscan_clamav.sh [ARGUMENTS] command.
f_arguments $1
#
SCAN_DIR=$1
if [ -n "$SCAN_DIR" ] && [ -d "$SCAN_DIR" ] ; then  # If $SCAN_DIR is non-null and is a legitimate directory...
   echo "Scan directory: $SCAN_DIR"
   DATE=`date`
   #
   LOG_FILE="/var/log/clamav/$(date +%Y%m%d-%H%M)_clamscan_report.log"
   LOG_FILE_TMP="/var/log/clamav/list_infected_files.tmp"
   echo "Log file is $LOG_FILE."
   echo
   # Update ClamAV Virus Definitions.
   f_update_virus_definitions_txt
   echo
   echo "Scan directory: $SCAN_DIR started on: ">>$LOG_FILE ; date>>$LOG_FILE
   ERROR=$?  # Was "sudo" included in command "sudo bash virusscan_clamav.sh <DIRECTORY>"?
             # (Needed for /var/log/clamav access).
   if [ $ERROR -eq 0 ] ; then
      echo
      echo
      echo -n "Scan also the sub-directories below $1? (Y/n/quit): "; read X
      case $X in
           [Nn] | [Nn][Oo]) OPTIONS=""
           ;;
           [Qq] | [Qq][Uu] | [Qq][Uu][Ii] | [Qq][Uu][Ii][Tt]) f_abort_txt
           ;;
           *) OPTIONS="-r"
           ;;  
      esac
      echo -n "Show only infected files? (Y/n/quit): " ; read X
      echo
      case $X in
           [Nn] | [Nn][Oo]) 
	       # echo "OPTIONS=$OPTIONS"  # Diagnostic line.
	       f_show_all_txt $OPTIONS $SCAN_DIR
	       ;;
           [Qq] | [Qq][Uu] | [Qq][Uu][Ii] | [Qq][Uu][Ii][Tt])
           f_abort_txt
	       ;;
           *) 
	       OPTIONS=$OPTIONS"_-i_-v" 
	       # echo "OPTIONS=$OPTIONS"  # Diagnostic line.
	       f_show_only_infected_txt $OPTIONS $SCAN_DIR 
	       ;;
      esac
      echo
      echo -n "Look at log file? (Y/n/quit): " ; read X
      case $X in
           [Nn] | [Nn][Oo]) 
	       ;;
           [Qq] | [Qq][Uu] | [Qq][Uu][Ii] | [Qq][Uu][Ii][Tt])
           f_abort_txt
	       ;;
           *)
           # Detect installed file viewer/pager.
           RUNAPP=0
           for FILE_VIEWER in most more less
           do
               if [ $RUNAPP -eq 0 ] ; then
                  type $FILE_VIEWER >/dev/null 2>&1  # Test if $FILE_VIEWER application is installed.
                  ERROR=$?
                  if [ $ERROR -eq 0 ] ; then
                     eval $FILE_VIEWER $LOG_FILE
                     RUNAPP=1   
                  fi
               fi
           done
	       ;;
      esac
   else
      echo -n $(tput setaf 1)
      echo -n $(tput bold)
      echo
      echo "Need \"sudo\" permission. Usage: sudo bash viruscan_clamav.sh <DIRECTORY TO BE SCANNED>."
   fi
else
   f_help_message_txt
fi
# All dun dun noodles.
